#*
 * Copyright Â© Microsoft Open Technologies, Inc.
 *
 * All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS
 * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION
 * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A
 * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.
 *
 * See the Apache License, Version 2.0 for the specific language
 * governing permissions and limitations under the License.
 *#
#set( $clsSuffix = ".class" )
package ${package};

import com.msopentech.odatajclient.proxy.api.annotations.Namespace;
import com.msopentech.odatajclient.proxy.api.annotations.EntityType;
import com.msopentech.odatajclient.proxy.api.annotations.Key;
import com.msopentech.odatajclient.proxy.api.annotations.KeyRef;
import com.msopentech.odatajclient.proxy.api.annotations.NavigationProperty;
import com.msopentech.odatajclient.proxy.api.annotations.Property;
import com.msopentech.odatajclient.proxy.api.annotations.FunctionImport;
import com.msopentech.odatajclient.proxy.api.annotations.Parameter;
import com.msopentech.odatajclient.engine.data.metadata.edm.v3.ParameterMode;
import com.msopentech.odatajclient.proxy.api.AbstractComplexType;
import com.msopentech.odatajclient.proxy.api.AbstractOpenType;
import com.msopentech.odatajclient.engine.data.metadata.EdmContentKind;
import com.msopentech.odatajclient.engine.data.metadata.edm.ConcurrencyMode;
#foreach($ns in $namespaces)
import ${basePackage}.${ns}.*;
import ${basePackage}.${ns}.types.*;
#end

// EdmSimpleType property imports
import com.msopentech.odatajclient.engine.data.ODataDuration;
import com.msopentech.odatajclient.engine.data.ODataTimestamp;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Geospatial;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.GeospatialCollection;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.LineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiLineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPoint;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPolygon;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Point;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Polygon;
import java.math.BigDecimal;
import java.net.URI;
import java.util.UUID;
import java.io.Serializable;
import java.util.Collection;

#if( $keyRef )@KeyRef(${keyRef}.class)#end

@Namespace("$namespace")
@EntityType(name = "$entityType.Name",
        openType = $entityType.isOpenType(),
        hasStream = $entityType.isHasStream(),
        isAbstract = $entityType.isAbstractEntityType(),
        baseType = "#if($utility.isNotBlank())$entityType.getBaseType()#end")
#set($baseTypeName = ${schemaName})
public interface $utility.capitalize($entityType.Name) extends #if( $baseType )$baseType#{elseif}( $entityType.isOpenType() )AbstractOpenType#{else}Serializable#end {

#set( $keys = [] )
#foreach($key in $entityType.Key.PropertyRefs)
    #if(!$keys.add($key.Name)) #stop #end
#end

#foreach($property in $entityType.Properties)
    #set($fcprops = $utility.getFcProperties($property) )
    #if($keys.contains($property.Name))@Key#end

    @Property(name = "$property.Name", 
                type = "$property.Type", 
                nullable = $property.Nullable,
                defaultValue = "#if($property.getDefaultValue())$property.getDefaultValue()#end",
                maxLenght = #if($property.getMaxLength() && !$property.getMaxLength().equalsIgnoreCase("max"))$property.getMaxLength()#{else}Integer.MAX_VALUE#end,
                fixedLenght = #if($property.isFixedLength())$property.isFixedLength()#{else}false#end,
                precision = #if($property.getPrecision())$property.getPrecision()#{else}0#end,
                scale = #if($property.getScale())$property.getScale()#{else}0#end,
                unicode = #if($property.isUnicode())$property.isUnicode()#{else}false#end,
                collation = "#if($property.getCollation())$property.getCollation()#end",
                srid = "#if($property.getSRID())$property.getSRID()#end",
                concurrencyMode = #if($property.getConcurrencyMode())ConcurrencyMode.$property.getConcurrencyMode()#{else}ConcurrencyMode.None#end,
                fcSourcePath = "#if($fcprops.containsKey("fcSourcePath"))$fcprops.get("fcSourcePath")#end",
                fcTargetPath = "#if($fcprops.containsKey("fcTargetPath"))$fcprops.get("fcTargetPath")#end",
                fcContentKind = #if($fcprops.containsKey("fcContentKind"))EdmContentKind.$fcprops.get("fcContentKind")#{else}EdmContentKind.text#end,
                fcNSPrefix = "#if($fcprops.containsKey("fcNSPrefix"))$fcprops.get("fcNSPrefix")#end",
                fcNSURI = "#if($fcprops.containsKey("fcNSURI"))$fcprops.get("fcNSURI")#end",
                fcKeepInContent = #if($fcprops.containsKey("fcKeepInContent"))$fcprops.get("fcKeepInContent")#{else}false#end)
    public $utility.getJavaType($property.Type) get$utility.capitalize($property.Name)();

    public void set$utility.capitalize($property.Name)(final $utility.getJavaType($property.Type) _$utility.uncapitalize($property.Name));

#end
    
#foreach($property in $entityType.NavigationProperties)
    #set( $toRoleType = $utility.getNavigationRoleType($property.Relationship, $property.ToRole) )

    @NavigationProperty(name = "$property.Name", 
                relationship = "$property.Relationship", 
                fromRole = "$property.FromRole", 
                toRole = "$property.ToRole")
    public $utility.getJavaType($toRoleType) get$utility.capitalize($property.Name)();

    public void set$utility.capitalize($property.Name)(final $utility.getJavaType($toRoleType) _$utility.uncapitalize($property.Name));

#end

#foreach($operation in $utility.getFunctionImportsBoundTo($entityType.Name, false))
    @FunctionImport(name = "$operation.Name" #if($operation.EntitySet), 
                    entitySet = $operation.EntitySet$clsSuffix#end #if($operation.EntitySetPath),
                    entitySetPath = $operation.EntitySetPath#end #if($operation.isIsComposable),
                    isComposable = $operation.isIsComposable#end #if($operation.isIsSideEffecting),
                    isSideEffecting = $operation.isIsSideEffecting#end #if($operation.HttpMethod),
                    httpMethod = HttpMethod.$operation.HttpMethod#end #if($operation.ReturnType),
                    returnType = "$operation.ReturnType"#end)
    #if($operation.ReturnType)$utility.getJavaType($operation.ReturnType)#{else}void#end $utility.uncapitalize($operation.Name)(
    #if($operation.Parameters)
      #set( $count = $operation.Parameters.size() )#*
      *##foreach($param in $operation.Parameters)#*
        *##set( $count = $count - 1 )#*
        *##if( !$utility.isSameType($entityType.Name, $param.Type, false) )#*
      *#    @Parameter(name = "$param.Name", type = "$param.Type", nullable = $param.Nullable#if($param.Mode), mode = ParameterMode.$param.Mode.toString()#end) $utility.getJavaType($param.Type) $utility.uncapitalize($param.Name)#if( $count > 0 ), #end

    #end
    #end#*
    *##end);
#end

#if($entityType.isHasStream())
    public void setStream(java.io.InputStream stream);

    public java.io.InputStream getStream();
#end
}
